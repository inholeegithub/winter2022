Written by In-Ho Lee, KRISS, November 8, 2020.

--------------------------------------poscar2qe.py and qeout2poscar.py--------------------------
input file: POSCAR
python  /home/ihlee/csa_vasp/poscar2qe/poscar2qe.py 
python  /home/ihlee/csa_vasp/poscar2qe/qeout2poscar.py 

1. setup [download] a POSCAR file
2. run the program in your working directory that contains POSCAR file
   python  ~/poscar2qe/poscar2qe.py 
3. cp scf.in_ scf.in 
4. mpirun -np 8  pw.x <scf.in > scf.out

1. setup [download] a POSCAR file
2. run the program in your working directory that contains POSCAR file
   python  ~/poscar2qe/poscar2qe.py 
3. cp vc-relax.in_   vc-relax.in
4. mpirun -np 8 pw.x < vc-relax.in > vc-relax.out
5. python qeout2poscar.py 
6. cp vc-relax.in_   vc-relax.in
7. mpirun -np 8 pw.x < vc-relax.in > vc-relax.out
8. python qeout2poscar.py 

--------------------------------------unit-cell, symmetrize the cell, --------------------------
input file: POSCAR
phonopy --tolerance 0.01 --symmetry  -c  POSCAR
phonopy --tolerance 0.008 --symmetry  -c  POSCAR

cp POSCAR    POSCAR__
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/phonopy --tolerance 0.01 --symmetry -c POSCAR >/dev/null
sleep 0.1
head -n 1 POSCAR >z1
sed -e 1d PPOSCAR >>z1
rm BPOSCAR PPOSCAR
mv z1 POSCAR

--------------------------------------Irreducible representation      --------------------------
input file: POSCAR
QE calculations
cat QEIRREPS.pbs
#!/bin/bash
#SBATCH --partition=g1
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=8
##
#SBATCH -J "QEIRREPS"
#SBATCH -o STDOUT.%j.out
#SBATCH -e STDERR.%j.err
#SBATCH -t 10-24:00:00  # The job can take at most 10 days 24 wall-clock hours.

## don't touch
. /etc/profile.d/TMI.sh
##

if false; then
cp POSCAR    POSCAR__
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/phonopy --tolerance 0.01 --symmetry -c POSCAR >/dev/null
sleep 0.1
head -n 1 POSCAR >z1
sed -e 1d PPOSCAR >>z1
rm BPOSCAR PPOSCAR
mv z1 POSCAR
sleep 0.1
fi

dirname='rlxallz4.save'
if [ -d "$dirname" ]; then
    rm -rf  "$dirname"
fi

/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python    /home/ihlee/qe/poscar2qe.py
sleep 0.1
if false;then
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
sleep 0.1
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
sleep 0.1
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
fi

if true;then
dirname='rlxallz4.save'
if [ -d "$dirname" ]; then
    rm -rf  "$dirname"
fi
dirname='dir-wfn'
if [ -d "$dirname" ]; then
    rm -rf  "$dirname"
fi
dirname='output'
if [ -d "$dirname" ]; then
    rm -rf  "$dirname"
fi
cp scf.in_    scf.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.3/bin/pw.x <scf.in > scf.out
sleep 0.1
cp rep.in_    rep.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.3/bin/pw.x <rep.in > rep.out
sleep 0.1
mkdir dir-wfn
mkdir output
sleep 0.1
/TGM/Apps/QE/6.3/bin/qe2respack     rlxallz4.save
sleep 0.1
int000=$( awk '/number of electrons/{printf("%.0f\n", $5)}' scf.out)
/TGM/Apps/QE/6.3/bin/qeirreps  .  $int000     > qeirreps.log
fi

--------------------------------------serial jobs for POSCAR_* files  --------------------------
input files: POSCAR_*
cat SERIAL.pbs
#!/bin/bash
#SBATCH --partition=g1
#SBATCH --nodes=3
#SBATCH --ntasks-per-node=8
##
#SBATCH -J "rdfSERIAL"
#SBATCH -o STDOUT.%j.out
#SBATCH -e STDERR.%j.err
#SBATCH -t 10-24:00:00  # The job can take at most 10 days 24 wall-clock hours.

## don't touch
. /etc/profile.d/TMI.sh
##

if [ -f  SERIAL.pbs.[eo]* ] ;  then
rm SERIAL.pbs.[eo]*
fi

yourfilenames=`ls ./POSCAR_*`
#yourfilenames=`ls -ltr POSCAR_tm* |awk '$8 >25 && $9 > 18'`
for eachfile in $yourfilenames
do
cp $eachfile     POSCAR   
if true; then
if [ -f  POTCAR  ] ;  then
rm POTCAR
fi
sleep 0.3
variable=`awk -v line=6 'NR==line' POSCAR`
#echo $variable
number=0
for element in $variable ;do
#echo $element
number=`expr $number + 1`
if [ $number -eq 1 ];then
cat /TGM/Apps/VASP/POTCAR/1.POTPAW.LDA.54.RECOMMEND/$element/POTCAR  > ./POTCAR
#cat /TGM/Apps/VASP/POTCAR/2.POTPAW.PBE.54.RECOMMEND/$element/POTCAR  > ./POTCAR
else
cat /TGM/Apps/VASP/POTCAR/1.POTPAW.LDA.54.RECOMMEND/$element/POTCAR  >> ./POTCAR
#cat /TGM/Apps/VASP/POTCAR/1.POTPAW.PBE.54.RECOMMEND/$element/POTCAR  >> ./POTCAR
fi
done
fi
if [ -f  STOPCAR  ] ;  then
rm STOPCAR
fi
if [ -f  KPOINTS  ] ;  then
rm KPOINTS
fi

# normal 
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlx  INCAR
sleep 0.3
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
# accurate
number=1
while [ $number -lt 4 ]
do
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlxall  INCAR
cp CONTCAR      POSCAR
sleep 0.3
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
cp OUTCAR out.out_$number
sleep 0.3
number=`expr $number + 1`
done

head -n 1 CONTCAR > z1
awk '/entropy=/  {print $7}'  OUTCAR |tail -n 1 >> z1
awk 'ORS=NR%2?FS:RS' z1 > z2
tail -n +2 CONTCAR >> z2
mv z2 CONTCAR
rm z1
cp CONTCAR   $eachfile

# accurate
if true; then
sleep 0.3
cp $eachfile     POSCAR   
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_mechanical_stability    INCAR
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
sleep 0.5
#python /home/ihlee/csa_vasp/util1/mechanical_stability/MechElastic_V2.py -d=3D -c=orthorhombic > output_mech
#python /home/ihlee/csa_vasp/util1/mechanical_stability/MechElastic_V2.py -d=3D -c=monoclinic > output_mech
python /home/ihlee/csa_vasp/util1/mechanical_stability/MechElastic_V2.py -d=3D > output_mech
mv output_mech  ${eachfile}output_mech
fi

# accurate 
if true; then
sleep 0.3
cp $eachfile     POSCAR   
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlxall0  INCAR
sleep 0.3
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_bs  INCAR
sleep 0.3
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
sleep 0.3
/home/ihlee/csa_vasp/util1/egap_test/a.out > direct_test 
mv direct_test   ${eachfile}direct_test
if false; then
python /home/ihlee/csa_vasp/poscar2qe/gen_kpath.py
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_bands  INCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
python /home/ihlee/csa_vasp/poscar2qe/gen_bands.py
mv bands.eps   ${eachfile}bands.eps
fi
if false; then
if [ -f  KPOINTS  ] ;  then
rm KPOINTS
fi
cp /home/ihlee/csa_vasp/poscar2qe/INCAR_dos_tetrahedron  INCAR
sleep 0.3
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
python /home/ihlee/csa_vasp/poscar2qe/gen_dos.py
mv dos.eps   ${eachfile}dos.eps
fi
fi

done

--------------------------------------gist for gen_kpath.py           --------------------------
import os
import numpy as np
import pyprocar
if os.path.isfile('KPOINTS'):
   os.system('rm KPOINTS')
pyprocar.kpath('POSCAR','KPOINTS',40,True, 'hpkot',1.e-7,1.e-5,-1.0, np.eye(3))

--------------------------------------gist for gen_bands.py           --------------------------
import pyprocar
pyprocar.repair('PROCAR','PROCAR_repaired')
pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-3,3],mode='plain',color='blue',kpointsfile='KPOINTS', savefig='bands.eps' )

--------------------------------------gist for gen_dos.py             --------------------------
import os
import numpy as np
import pyprocar
if True:
#   pyprocar.dosplot(filename='vasprun.xml', mode='stack',colors=['green','orange','cyan'],items=dict(C=[0,1,2,3],S=[0,1,2,3],H=[0]), elimit=[-4, 3], orientation='vertical',orbitals=[0], plot_total=True)
   pyprocar.dosplot(filename='vasprun.xml', mode='plain', elimit=[-4, 3], spins=[0], orientation='vertical', savefig='dos.eps' )

--------------------------------------gist for gen_potcar.py          --------------------------
import os
import numpy as np
import pyprocar
if os.path.isfile('KPOINTS'):
   os.system('rm KPOINTS')
pyprocar.kpath('POSCAR','KPOINTS',40,True, 'hpkot',1.e-7,1.e-5,-1.0, np.eye(3))

--------------------------------------sample cmd_pyprocar.py          --------------------------
import os
import numpy as np
import pyprocar
if False:
   aa=[]
   afile=open("POSCAR","r")
   ii=0
   for line in afile:
       ii=ii+1
       if ii == 6 :
          nspecies=len(line.split())
          for j in range(nspecies):
              aa.append(line.split()[j])
   afile.close()
   for j in range(nspecies):
       if j == 0:
#         cmd='cat /TGM/Apps/VASP/POTCAR/2.POTPAW.PBE.54.RECOMMEND/'+aa[j].strip()+'/POTCAR   > ./POTCAR'
          cmd='cat /TGM/Apps/VASP/POTCAR/1.POTPAW.LDA.54.RECOMMEND/'+aa[j].strip()+'/POTCAR   > ./POTCAR'
       else :
#         cmd='cat /TGM/Apps/VASP/POTCAR/2.POTPAW.PBE.54.RECOMMEND/'+aa[j].strip()+'/POTCAR  >> ./POTCAR'
          cmd='cat /TGM/Apps/VASP/POTCAR/1.POTPAW.LDA.54.RECOMMEND/'+aa[j].strip()+'/POTCAR  >> ./POTCAR'
       print(cmd)
       returned_value = os.system(cmd)
if False:
   if os.path.isfile('KPOINTS'):
      os.system('rm KPOINTS')
   os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlx  INCAR')
   os.system('sleep 0.3')
   os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
   os.system('cp CONTCAR  POSCAR')
   for kter in range(3):
       os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlxall  INCAR')
       os.system('sleep 0.3')
       os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
       os.system('cp CONTCAR  POSCAR')
       os.system('cp CONTCAR  POSCAR_')
if False:
   if os.path.isfile('KPOINTS'):
      os.system('rm KPOINTS')
   os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_mechanical_stability    INCAR')
   os.system('sleep 0.3')
   os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
   os.system('sleep 0.3')
   os.system('python /home/ihlee/csa_vasp/poscar2qe/MechElastic_V2.py -d=3D > output_mech')
if False:
   if os.path.isfile('KPOINTS'):
      os.system('rm KPOINTS')
   os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_rlxall0  INCAR')
   os.system('sleep 0.3')
   os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
   os.system('sleep 0.3')
   pyprocar.kpath('POSCAR','KPOINTS',40,True, 'hpkot',1.e-7,1.e-5,-1.0, np.eye(3))
   os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_bands  INCAR')
   os.system('sleep 0.3')
   os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
   os.system('sleep 0.3')
if True:
   pyprocar.repair('PROCAR','PROCAR_repaired')
#  pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],mode='plain',color='blue',kpointsfile='KPOINTS' )
#  pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', orbitals=[0] )
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', orbitals=[1,2,3] , savefig='bands.eps')
#  pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', orbitals=[4,5,6,7,8] )
if False:
   pyprocar.repair('PROCAR','PROCAR_repaired')
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', atoms=[0,1] )
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', atoms=[2,3] )
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', atoms=[4,5,6,7,8,9,10,11,12,13,14,15] )
if False:
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', atoms=[0],orbitals=[0] )
   pyprocar.bandsplot('PROCAR_repaired',outcar='OUTCAR',elimit=[-4,3],kpointsfile='KPOINTS',cmap='jet',mode='parametric', atoms=[1],orbitals=[1,2,3] )
if False:
   if os.path.isfile('KPOINTS'):
      os.system('rm KPOINTS')
   os.system('cp /home/ihlee/csa_vasp/poscar2qe/INCAR_dos_tetrahedron  INCAR')
   os.system('sleep 0.3')
   os.system('mpirun -np 8 /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log')
   os.system('sleep 0.3')
if False:
   pyprocar.repair('PROCAR','PROCAR_repaired')
   pyprocar.bandgap(procar="PROCAR_repaired", outcar="OUTCAR", code="vasp")
#  pyprocar.dosplot(filename='vasprun.xml', mode='plain', elimit=[-4, 3], spins=[0], orientation='vertical' )
#  pyprocar.dosplot(filename='vasprun.xml', mode='plain', elimit=[-4, 3], orientation='vertical' )
#  pyprocar.dosplot(filename='vasprun.xml', mode='parametric', elimit=[-4, 3], orientation='vertical',orbitals=[0],atoms=[4,5,6,7,8,9,10,11,12,13,14,15] )
#  pyprocar.dosplot(filename='vasprun.xml', mode='parametric', elimit=[-4, 3], orientation='vertical',orbitals=[0], plot_total=True)
#  pyprocar.dosplot(filename='vasprun.xml', mode='parametric', elimit=[-4, 3], orientation='vertical',orbitals=[0], plot_total=True)
   pyprocar.dosplot(filename='vasprun.xml', mode='stack',colors=['green','orange','cyan'],items=dict(C=[0,1,2,3],S=[0,1,2,3],H=[0]), elimit=[-4, 3], orientation='vertical',orbitals=[0], plot_total=True, savefig='dos.eps')
#  pyprocar.dosplot(filename='vasprun.xml', mode='parametric', elimit=[-4, 3], orientation='vertical',atoms=[4,5,6,7,8,9,10,11,12,13,14,15] )
#  pyprocar.dosplot(filename='vasprun.xml', mode='parametric', elimit=[-4, 3], orientation='vertical',orbitals=[1,2,3] )

--------------------------------------tetrahedron for superconductivity-------------------------
input file: POSCAR
QE calculations
cat QETETRA.pbs
#!/bin/bash
#SBATCH --partition=g7
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=24
##
#SBATCH -J "QETET_CSHlda"
#SBATCH -o STDOUT.%j.out
#SBATCH -e STDERR.%j.err
#SBATCH -t 10-24:00:00  # The job can take at most 10 days 24 wall-clock hours.

## don't touch
. /etc/profile.d/TMI.sh
##

if false; then
python ~/csa_vasp/poscar2qe/poscar2qe.py
fi
if false; then
cp POSCAR    POSCAR__
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/phonopy --tolerance 0.01 --symmetry -c POSCAR >/dev/null
sleep 0.1
head -n 1 POSCAR >z1
sed -e 1d PPOSCAR >>z1
rm BPOSCAR PPOSCAR
mv z1 POSCAR
sleep 0.1
fi

dirname='rlxallz4.save'
if [ -d "$dirname" ]; then
    rm -rf  "$dirname"
fi

if false;then
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python    /home/ihlee/qe/poscar2qe.py
sleep 0.1
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
sleep 0.1
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
sleep 0.1
cp vc-relax.in_    vc-relax.in
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <vc-relax.in > vc-relax.out
sleep 0.1
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python   /home/ihlee/qe/qeout2poscar.py
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/python    /home/ihlee/qe/poscar2qe.py
fi

cp scf.in_tet  scf.in
sleep 0.1
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/pw.x <scf.in > scf.out
sleep 0.1
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/ph.x < ph.in > ph.out
sleep 0.1
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/ph.x < elph.in > elph.out
sleep 0.1
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/QE/6.5/bin/alpha2f.x   < elph.in >  rlxallz4a2F.out

--------------------------------------PHONOPY_DFPT----------------------------------------------
#!/bin/bash
#SBATCH --partition=g4
#SBATCH --nodes=2
#SBATCH --ntasks-per-node=12
##
#SBATCH -J "dftp"
#SBATCH -o STDOUT.%j.out
#SBATCH -e STDERR.%j.err
#SBATCH -t 10-24:00:00  # The job can take at most 10 days 24 wall-clock hours.

## don't touch
. /etc/profile.d/TMI.sh
##

NAC=1
if [ $NAC == 1 ] ; then
cp POSCAR-unitcell   POSCAR
cp ~/csa_vasp/poscar2qe/INCAR_born        INCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
sleep 0.5
phonopy-vasp-born     vasprun.xml  >g1
sed -i '1d' g1
echo 14.399652   >g0
cat g0 g1        >BORN
rm g0 g1
fi

if true; then
phonopy -d --dim="2 2 2" -c POSCAR-unitcell
fi

sleep 0.5
cp SPOSCAR      POSCAR
cp ~/csa_vasp/poscar2qe/INCAR_dftp   INCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
sleep 0.5
phonopy --fc vasprun.xml
sleep 0.5
cp ~/csa_vasp/poscar2qe/band_auto.conf   band.conf

if [ $NAC == 1 ] ; then
phonopy --dim="2 2 2" -c POSCAR-unitcell  band.conf  --readfc --nac
else
phonopy --dim="2 2 2" -c POSCAR-unitcell  band.conf  --readfc
fi
#phonopy-bandplot    band.yaml
