#!/bin/bash
#SBATCH --partition=g4
#SBATCH --nodes=2
#SBATCH --ntasks-per-node=12
##
#SBATCH -J "Si5d"
#SBATCH -o STDOUT.%j.out
#SBATCH -e STDERR.%j.err
#SBATCH -t 10-24:00:00  # The job can take at most 10 days 24 wall-clock hours.

## don't touch
. /etc/profile.d/TMI.sh
##

rm CSA_SOLDIER.pbs.[eo]*

kounter=1
while [ $kounter -lt 21 ]
do 
printf -v ntag "%04d" $kounter
cp ../POSCAR_$ntag  ./POSCAR

# find a primitive unit cell with phonopy 
if false; then
/TGM/Apps/PYTHON/3.6.8_intel_2019.0.075/bin/phonopy --tolerance 0.01 --symmetry -c POSCAR >/dev/null
head -n 1 POSCAR >z1
sed -e 1d PPOSCAR >>z1
rm BPOSCAR PPOSCAR
mv z1 POSCAR
fi

# do not change file names, e.g., stdout.log, STOP, STATUS
# we can specifiy the KPOINTS file by using cp command as shown below
# otherwise, we can use KSPACING, KGAMMA parameters in the INCAR, in addition, you have to use the following commands
if [ -f  STOPCAR  ] ;  then
rm STOPCAR
fi
if [ -f  KPOINTS  ] ;  then
rm KPOINTS
fi
# normal 
cp INCAR_rlx    INCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
## accurate   500 eV
number=1
while [ $number -lt 4 ]
do
cp INCAR_rlxall INCAR
cp CONTCAR      POSCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
cp OUTCAR out.out_$number
sleep 0.5
if true; then
lvar=$(grep sigma OUTCAR |awk '/py=/ {print $7}' |tail -n1 | awk '{ if ($0 < -0.00000) {print "Yes"} else {print "No"}}')
if [ $lvar == "No" ] ;  then
      break
fi
fi
number=`expr $number + 1`
done

head -n 1 CONTCAR > z1
awk '/entropy=/  {print $7}'  OUTCAR |tail -n 1 >> z1
awk 'ORS=NR%2?FS:RS' z1 > z2
tail -n +2 CONTCAR >> z2
mv z2 CONTCAR
rm z1

## accurate   500 eV
if true; then
cp INCAR_bs  INCAR
cp CONTCAR  POSCAR
sleep 0.5
mpirun -genv I_MPI_DEBUG 5 -np $SLURM_NTASKS /TGM/Apps/VASP/bin/5.4.4/O3/NORMAL/vasp.5.4.4.pl2.O3.NORMAL.ncl.x > stdout.log
fi

/home/ihlee/csa_vasp/util1/egap_test/a.out > direct_test_$kounter
kounter=`expr $kounter + 1`
done
